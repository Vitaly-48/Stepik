"""
Немного теории
Библиотеки

Алгоритм рисования

Создание геометрической фигуры

Рисование линий, объединенных в пути

Библиотеки
Рисование плоских фигур осуществляется с помощью модуля matplotlib.pyplot:

import matplotlib.pyplot as plt
Плоские геометрические фигуры создаются с помощью библиотеки matplotlib.patches, из которой можно импортировать шаблоны для различных плоских геометрических фигур:

from matplotlib.patches import Circle, Wedge, Polygon, Ellipse, Arc, Path, PathPatch
Алгоритм рисования
Все геометрические объекты рисуются в несколько шагов.

1. Импортируются все необходимые модули, функции, шаблоны:

from matplotlib.patches import  Circle

import matplotlib.pyplot as plt
2. Определяются координаты окна, в котором будет создаваться изображение, например, следующие операторы создают окно, координаты которого по горизонтали изменяются от 0 до 12 по горизонтали и вертикали:

plt.xlim(0, 12)

plt.ylim(0, 12)
3. Создается область для рисования, связанная с осями координат с помощью метода gca():

ax = plt.gca()
4. Создается геометрическая фигура на основе описания из модуля matplotlib.patches . Например, следующий оператор создает круг с центром в точке (6, 7) и радиусом 5 и заносит результат в переменную circle:

circle = Circle((6, 7),5)
5. Созданная фигура добавляется в область ax с помощью метода add_patch():

ax.add_patch(circle)
6. Рисунок отображается в графическом окне:

plt.show()
Результат:



Создание геометрической фигуры
Каждая геометрическая фигура создается методом  библиотеки matplotlib.patches, который имеет два типа параметров:

1. Значения, описывающие положение фигуры в области рисования, такие как координаты точек, радиусы, величины углов - каждая фигура имеет свой набор значений:

Rectangle((x, y), width, height) -  создает прямоугольник, левый верхний угол которого располагается в точке с координатами (x, y) ,  высота которого равна width, а длина - height.

Circle((x, y), radius) -  создает круг с центром в точке (x, y) ,  радиуса radius.

Ellipse((x, y), width, height) -  создает эллипс с центром в точке (x, y) ,  диаметр которого по горизонтальной оси равен width, а диаметр по вертикальной - height.

Wedge((x, y), radius,  t1,  t2) -  создает сектор с центром в точке (x, y) ,  радиуса radius, ограниченный линиями углов t1 и t2:



Arc((x, y), width, height, angle, t1, t2)  - создает дугу с центром в точке (x, y) ,  диаметр которой по горизонтальной оси равен width, а диаметр по вертикальной - height, угол поворота дуги относительно центра angle, дуга ограничена линиями углов t1 и t2.



Polygon([(x0, y0), (x1, y1), (x2, y2), ... ], closed) - создает ломаную линию по точкам (x0, y0), (x1, y1), (x2, y2), ..., если параметр closedравен True (или он отсутствует) , первая точка соединяется с последней, в противном случае (closed= False), ломаная линия остается незамкнутой.

2. Свойства, описывающие стиль вывода каждой фигуры, общие для всех фигур. Основные свойства представлены в таблице, большинство из них могут быть описаны в полной или сокращенной форме:

Характеристика	Описание
facecolor="цвет"
fc="цвет"	цвет заливки фигуры
linewidth=значение
lw=значение	толщина границы фигуры
edgecolor="цвет"
ec="цвет"	цвет границы фигуры
fill=значение	фигура закрашенная (true,  по умолчанию)
или незакрашенная(false)
 Рисование линий, объединенных в пути
Совокупность линии можно рисовать с помощью так называемых путей (Path). Путь представляет собой список опорных точек (как при создании полигона) и список кодов, задающих, что с этими вершинами делать. Коды - это числовые константы, определенные в модуле Path, которые могут принимать значения MOVETO (переместиться в точку без рисования линии), LINETO (провести линию в заданную точку) и др. Коды можно записывать двумя способами: либо полной ссылкой типа  matplotlib.path.Path.MOVETO или matplotlib.path.Path.LINETO, либо цифрой  1 или 2 соответственно.

Пример рисования линий, объединенных в пути

Нарисуем картинку:





1. Импортируем необходимые функции и библиотеки:

from matplotlib.patches import Path, PathPatch

import matplotlib.pyplot as plt
2. Настроим область рисования:

n = 8

m  = 8

plt.xlim(0, n)

plt.ylim(0, m)

ax = plt.gca()
3. Создадим список опорных точек:

vertices = [(0, 6), (2, 8), (2, 4), (4, 6), (4, 2), (6,4), (6, 0), (8,2)]
4. Создадим список кодов ( в нашем случае установить курсор в первую точку (MOVETO), провести линию во вторую (LINETO), установить курсор в третью (MOVETO), провести линию в четвертую (LINETO) и т.д.):

codes = [1, 2, 1, 2, 1, 2, 1, 2]
5. Создадим переменную path c помощью метода matplotlib.patches.Path,  указав список вершин (vertices) и список кодов (codes):

path = Path(vertices, codes)
6. Создадим фигуру, представляющую собой совокупность линий, толщиной 3 px:

path_patch = PathPatch(path, lw=3)
7. Добавим созданную фигуру в область ax ,  удалим оси и покажем рисунок

ax.add_patch(path_patch)

ax.axes.set_axis_off()

plt.show()
Результат:




"""